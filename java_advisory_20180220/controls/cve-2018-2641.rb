# encoding: utf-8
# copyright: 2018, eNFence GmbH

title 'java_advisory_20180220'

control 'CVE-2018-2641' do
  impact 0.61
  title 'An unspecified vulnerability related to the Java SE AWT component could allow an unauthenticated attacker to cause no confidentiality impact, high integrity impact, and no availability impact.'
  desc 'Vulnerability in the Java SE, Java SE Embedded component of Oracle Java SE 
        (subcomponent: AWT). Supported versions that are affected are Java SE: 6u171, 
        7u161, 8u152 and 9.0.1; Java SE Embedded: 8u151. Difficult to exploit 
        vulnerability allows unauthenticated attacker with network access via multiple 
        protocols to compromise Java SE, Java SE Embedded. Successful attacks require 
        human interaction from a person other than the attacker and while the vulnerability 
        is in Java SE, Java SE Embedded, attacks may significantly impact additional 
        products. Successful attacks of this vulnerability can result in unauthorized 
        creation, deletion or modification access to critical data or all Java SE, Java SE 
        Embedded accessible data. Note: This vulnerability applies to Java deployments, 
        typically in clients running sandboxed Java Web Start applications or sandboxed 
        Java applets, that load and run untrusted code (e.g., code that comes from the 
        internet) and rely on the Java sandbox for security. This vulnerability does not 
        apply to Java deployments, typically in servers, that load and run only trusted 
        code (e.g., code installed by an administrator). 
  '
  tag 'java', 'jre', 'java 8'
  tag :score, '6.1'
  ref 'http://www-01.ibm.com/support/docview.wss?uid=swg1IJ04040'

  only_if do
    os.aix?
  end

  describe command('/usr/bin/lslpp -Lqc Java6_64.sdk') do
    its('stdout') { should_not match(/:6\.0\.0\.[0-5]/) }
    its('stdout') { should_not match(/:6\.0\.0\.6[0-5]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java6.sdk') do
    its('stdout') { should_not match(/:6\.0\.0\.[0-5]/) }
    its('stdout') { should_not match(/:6\.0\.0\.6[0-5]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java7_64.jre') do
    its('stdout') { should_not match(/:7\.0\.0\.[0-5]/) }
    its('stdout') { should_not match(/:7\.0\.0\.6[0-1]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java7_64.sdk') do
    its('stdout') { should_not match(/:7\.0\.0\.[0-5]/) }
    its('stdout') { should_not match(/:7\.0\.0\.6[0-1]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java7.jre') do
    its('stdout') { should_not match(/:7\.0\.0\.[0-5]/) }
    its('stdout') { should_not match(/:7\.0\.0\.6[0-1]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java7.sdk') do
    its('stdout') { should_not match(/:7\.0\.0\.[0-5]/) }
    its('stdout') { should_not match(/:7\.0\.0\.6[0-1]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java71_64.jre') do
    its('stdout') { should_not match(/:7\.1\.0\.[0-3]/) }
    its('stdout') { should_not match(/:7\.1\.0\.4[0-1]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java71_64.sdk') do
    its('stdout') { should_not match(/:7\.1\.0\.[0-3]/) }
    its('stdout') { should_not match(/:7\.1\.0\.4[0-1]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java71.jre') do
    its('stdout') { should_not match(/:7\.1\.0\.[0-3]/) }
    its('stdout') { should_not match(/:7\.1\.0\.4[0-1]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java71.sdk') do
    its('stdout') { should_not match(/:7\.1\.0\.[0-3]/) }
    its('stdout') { should_not match(/:7\.1\.0\.4[0-1]/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java8_64.jre') do
    its('stdout') { should_not match(/:8\.0\.0\.[0-4]/) }
    its('stdout') { should_not match(/:8\.0\.0\.50/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java8_64.sdk') do
    its('stdout') { should_not match(/:8\.0\.0\.[0-4]/) }
    its('stdout') { should_not match(/:8\.0\.0\.50/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java8.jre') do
    its('stdout') { should_not match(/:8\.0\.0\.[0-4]/) }
    its('stdout') { should_not match(/:8\.0\.0\.50/) }
  end

  describe command('/usr/bin/lslpp -Lqc Java8.sdk') do
    its('stdout') { should_not match(/:8\.0\.0\.[0-4]/) }
    its('stdout') { should_not match(/:8\.0\.0\.50/) }
  end
end

